import requests
import datetime
import pandas as pd

# API URLs below
nvd_url = 'https://services.nvd.nist.gov/rest/json/cves/2.0'
epss_url = 'https://api.first.org/data/v1/epss'

# Returns the EPSS score for a given vulnerability
def get_single_epss(cve):
    payload = {'cve': cve}
    request = requests.get(epss_url, params=payload)
    response = request.json()
    # Below checks if an EPSS score exists
    if response['data'] != []:
        epss_score = float(response['data'][0]['epss'])
    else:
        epss_score = 'N/A'
    return epss_score

# Extracts key vulnerability attributes from NVD output
def parse_nvd_data(vuln):
    cve_id = vuln['cve']['id']
    published_date = vuln['cve']['published'][:10]
    vuln_description = vuln['cve']['descriptions'][0]['value']
    if vuln['cve']['metrics'] != {}:
        cvss_metrics_key = list(vuln['cve']['metrics'].keys())[0]
        cvss_data = vuln['cve']['metrics'][cvss_metrics_key][0]['cvssData']
        cvss_version = float(cvss_data['version'])
        cvss_base_score = float(cvss_data['baseScore'])
        cvss_score_vector = cvss_data['vectorString'][9:]
        cvss_base_severity = cvss_data['baseSeverity']
    else:
        cvss_version = 'Not Available'
        cvss_base_score = 'Not Available'
        cvss_score_vector = 'Not Available'
        cvss_base_severity = 'Not Available'
    if 'cisaExploitAdd' in vuln['cve'].keys():
        cisa_known_exploit = 'Yes'
    else:
        cisa_known_exploit = 'No'
    return cve_id,published_date,vuln_description,cvss_version,cvss_base_score,cvss_score_vector,cvss_base_severity,cisa_known_exploit

# Takes in a single vulnerability and prints NVD attributes and EPSS score to the shell
def get_single_cve(cve):
    payload = {'cveId': cve}
    nvd_request = requests.get(nvd_url, params=payload)
    response = nvd_request.json()
    vulns_list = response['vulnerabilities'][0]
    cve_id,published_date,vuln_description,cvss_version,cvss_base_score,cvss_score_vector,cvss_base_severity,cisa_known_exploit = parse_nvd_data(vulns_list)
    epss_score = get_single_epss(cve)
    epss_score = round((epss_score * 100), 2)
    print(f'CVE ID: {cve_id}',
          f'NVD Published Date: {published_date}',
          f'Description: {vuln_description}',
          f'CVSS Version: {cvss_version}',
          f'CVSS Base Score: {cvss_base_score}',
          f'CVSS Severity: {cvss_base_severity}',
          f'CVSS Vector: {cvss_score_vector}',
          f'CISA Known Exploited: {cisa_known_exploit}',
          f'EPSS Score: {epss_score}% likelihood of exploitation in the wild in the next 30 days', sep='\n')

# Exports csv file with most recent vulnerabilities (timeframe configurable) 
def get_latest_vulns(days=30):
    date_today = datetime.date.today()
    date_tomorrow = date_today + datetime.timedelta(days=1)
    # Timeframe set as argument of function
    days_prior = date_today - datetime.timedelta(days)
    end_date = str(date_tomorrow)
    start_date = str(days_prior)
    payload = {'pubStartDate': f'{start_date}T00:00:00', 'pubEndDate': f'{end_date}T00:00:00', 'startIndex': '0'}
    nvd_request = requests.get(nvd_url, params=payload)
    response = nvd_request.json()
    total_results = response['totalResults']
    number_pages = round(total_results / 2000 + 0.5)
    vuln_data = []
    for page in range(0, number_pages):
        start_index = str(page * 2000)
        payload['startIndex'] = start_index
        nvd_request = requests.get(nvd_url, params=payload)
        response = nvd_request.json()
        for vuln in response['vulnerabilities']:
            cve_id,published_date,vuln_description,cvss_version,cvss_base_score,cvss_score_vector,cvss_base_severity,cisa_known_exploit = parse_nvd_data(vuln)
            cve_details = [cve_id, published_date, vuln_description, cvss_version, cvss_base_score, cvss_score_vector, cvss_base_severity, cisa_known_exploit]
            vuln_data.append(cve_details)
    vuln_columns = ['cve_id', 'published_date', 'description', 'cvss_version', 'cvss_score', 'cvss_vector', 'severity', 'cisa_known_exploit']
    recent_vulns = pd.DataFrame(vuln_data, columns=vuln_columns)
    recent_vulns.to_csv('recent_vulns.csv', index=False)


get_latest_vulns()